package main

import (
	"github.com/gofiber/fiber/v2/middleware/cors"
	"log"
	"scylla/handler"
	"scylla/pkg/config"
	"scylla/pkg/exception"
	"scylla/pkg/utils"
	"scylla/repository"
	"scylla/router"
	"scylla/service"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/gofiber/fiber/v2/middleware/requestid"
	"github.com/swaggo/fiber-swagger"
	docs "scylla/docs" // docs is generated by Swag CLI, you have to import it.
)

//	@title			Boilerplate API
//	@version		1.0
//	@description	Boilerplate API in Go using Fiber framework

//	@securityDefinitions.apikey	Bearer
//	@in							header
//	@name						Authorization
//	@description				Type "Bearer" followed by a space and JWT token.

func main() {
	loadConfig, err := config.LoadConfig(".")
	if err != nil {
		panic(exception.NewInternalServerErrorHandler(err.Error()))
	}

	//Database
	db := config.ConnectionDB(&loadConfig)

	//Validate
	validate := utils.InitializeValidator(db)

	// environment swagger
	if loadConfig.Environment != "dev" {
		docs.SwaggerInfo.Host = loadConfig.SwaggerHost
		docs.SwaggerInfo.BasePath = loadConfig.SwaggerUrl
	} else {
		docs.SwaggerInfo.Host = "localhost:3000"
		docs.SwaggerInfo.BasePath = "/api/v1"
	}
	// init repository
	customerRepo := repository.NewCustomerRepoImpl(db)

	// init service
	customerService := service.NewCustomerServiceImpl(customerRepo, validate)
	dmsService := service.NewDmsServiceImpl()
	// init handler
	customerHandler := handler.NewCustomerHandler(customerService)
	dmsHandler := handler.NewDmsHandler(dmsService)

	routes := router.NewRouter(
		dmsHandler,
		customerHandler,
	)

	app := fiber.New(fiber.Config{
		ErrorHandler: exception.ExceptionHandlers,
	})
	app.Use(recover.New())
	app.Use(requestid.New())
	app.Use(logger.New(logger.Config{
		Format: "[${locals:requestid}] ${ip} - ${method} ${status} ${path} - ${latency}\n",
	}))
	app.Use(cors.New())

	app.Mount("/api/v1", routes)
	app.Get("/docs/*", fiberSwagger.WrapHandler)
	app.Use(func(ctx *fiber.Ctx) error {
		return ctx.Status(404).JSON(fiber.Map{
			"code":     404,
			"status":   "NOT FOUND",
			"errors":   "Page Not Found",
			"trace_id": ctx.Locals("requestid").(string),
		})
	})
	log.Fatal(app.Listen(":" + loadConfig.ServerPort))
}
